{"version":3,"sources":["webpack:///E:/data/TEST/BY/之后。/毕设/物联网Demo/上位机/pages/index/index.vue?f387","webpack:///E:/data/TEST/BY/之后。/毕设/物联网Demo/上位机/pages/index/index.vue?23c4","uni-app:///main.js",null,"webpack:///E:/data/TEST/BY/之后。/毕设/物联网Demo/上位机/pages/index/index.vue?2736","webpack:///E:/data/TEST/BY/之后。/毕设/物联网Demo/上位机/pages/index/index.vue?fc79","webpack:///E:/data/TEST/BY/之后。/毕设/物联网Demo/上位机/pages/index/index.vue?e000","uni-app:///pages/index/index.vue"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","require","createCommonToken","BASE_URL","PRODUCT_ID","DEVICE_NAME","onPageScroll","beforeDestroy","data","light","angle","mode","isRequesting","dataUpdated","timer","errorMsg","isRefreshing","start_time","end_time","timer_angle","isSwitchingMode","switchModeTimer","lastSwitchTime","modeSwitchRetries","currentDeviceMode","targetAngle","angleCheckTimer","angleCheckCount","_lastClickTime","localModeOverride","lastModeChangeTime","isEditingTime","tempStartTime","tempEndTime","saveTimer","savingProperty","targetMode","onLoad","author_key","version","user_id","uni","onShow","onHide","clearInterval","onUnload","clearTimeout","onPullDownRefresh","setTimeout","methods","cacheDeviceState","restoreDeviceState","Object","getDataFromOnenet","isManualRefresh","retryCount","maxRetries","result","url","method","product_id","device_name","header","success","map","console","resolve","reject","fail","complete","params","title","icon","event","then","finally","duration","catch","initialAngle","newMode","expectedMode","e","property","key"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAgkC,CAAgB,s8BAAG,EAAC,C;;;;;;;;;;;ACAplC;AACA,OAAO,KAAU,EAAE,kBAKd;;;;;;;;;;;;;;;;ACNL;AAE4D;AAC5D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAAC;AAG3DC,UAAU,CAACC,cAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkH;AAClH;AACyD;AACL;AACa;;;AAGjE;AACgM;AAChM,gBAAgB,2LAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gFAAM;AACR,EAAE,yFAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAmvB,CAAgB,qrBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+GvwB,eAEAC;EADAC;;AAGA;AACA;EACAC;EACAC;EACAC;AACA;AAAA,eAEA;EACA;EACAC;IACA;IACA;IACA;MACA;IAAA,CACA;EACA;EAEA;EACAC;IACA;IACA;IACA;EACA;EACAC;IACA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACA;MACAC;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;EACAC;IAAA;IACA;MACAC;MACAC;MACAC;IACA;IACA;IACA;IACA;IACA;IACAC;MACA;QACA;MACA;QACA;QACA;MACA;IACA;EACA;EACAC;IAAA;IACA;IACA;IACA;IACA;MACA;IACA;EACA;EACAC;IACA;IACA;MACAC;MACA;IACA;EACA;EACAC;IACA;IACA;MACAD;MACA;IACA;IACA;IACA;MACAE;MACA;IACA;IACA;IACA;MACAA;MACA;IACA;EACA;EACA;EACAC;IAAA;IACA;IACA;MACAC;QACAP;QACA;MACA;IACA;EACA;EACAQ;IACA;IACAC;MACA;QACAvC;QACAD;QACAS;QACAF;QACAC;MACA;MACAuB;IACA;IAEA;IACAU;MACA;MACA;QACAC;MACA;IACA;IACA;IACAC;MAAA;QAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAAC;gBACAC;gBACAC;cAAA;gBAAA,MAEAD;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA;gBAAA,OAGA;cAAA;gBAAAE;gBAAA,iCACAA;cAAA;gBAAA;gBAAA;gBAEAF;gBAAA,MACAA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA,OAIA;kBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAGA;EAAA,6FAOA;IAAA;IAAA;IACA;IACA;IACA;IACA;;IAEA;MACAd;QACA;QACAiB;QACAC;QACA;QACAnD;UACAoD;UACAC;QACA;QACAC;UACA;QACA;;QACAC;UACA;YACA;YACA;cACAtD;cACAC;cACAC;YACA;;YAEA;YACA;cACAqD;cACA;YACA;;YAEA;YACA;YACA;;YAEA;YACA;;YAEA;YACA;cACA;cACA;cACA;gBACAC;cACA;gBACA;gBACA;gBACA;cACA;YACA;cACA;cACA;YACA;;YAGA;YACA;cACA;cACA;cACA;YACA;cACAA;YACA;;YAEA;YACA;cACA;YACA;YAEAC;UACA;YAAA;YACA;YACAC;UACA;QACA;QACAC;UACA;UACAH;UACAE;QACA;QACAE;UACA;QACA;MACA;IACA;EACA,wGAKA;IAAA;IACA;IACArB;MACA;IACA;EACA,0FAKA;IACA;IACA;EACA,8FAOAsB;IAAA;IAAA;IACA;MACA7B;QACA8B;QACAC;MACA;MACA;IACA;;IAEA;IACA;MACA;IACA;IAEA;MACA/B;QACAiB;QACAC;QACAnD;UACAoD;UACAC;UACAS;QACA;QACAR;UACA;QACA;QACAC;UACA;YACAG;UACA;YAAA;YACA;YACA;cAAA;cACA;cACAzB;gBACA8B;gBACAC;cACA;YACA;YACAL;UACA;QACA;QACAC;UACA;UACA;YACA3B;cACA8B;cACAC;YACA;UACA;UACAL;QACA;QACAE;UACA;UACA;YACA;UACA;QACA;MACA;IACA;EACA,gGAGAI;IAAA;IACA;IACAhC;MAAA8B;IAAA;IAEA;MAAA;IAAA,GACAG;MACA;MACAjC;QACA8B;QACAC;MACA;MACA;IACA,GACAG;MACAlC;IACA;EACA,4FAIA;IACA;IACA;IACA;IACA;IAEAwB;;IAEA;IACA;MACAA;MACA;IACA;IACA;;IAEA;IACA;EACA,4FAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;MACA;IACA;IACA;;IAEA;IACA;EACA,8FAGAvD;IAAA;IACA;IACAA;IACA;MACAuD;MACA;IACA;;IAEA;IACAvD;;IAEA;IACAA;IAEA;;IAEAuD;;IAEA;IACA;MACAnB;MACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEA;IACAL;MACA8B;MACAC;MACAI;IACA;;IAEA;IACA;MAAA;IAAA,gBACAF;MACAT;MACA;MACA;IACA,GACAY;MACAZ;MACA;MACA;IACA;EACA,8FAEAa;IAAA;IACA;IACA9B;MACA;MACA,gCACA0B;QACA;QACA;UACAT;UACA;UACAxB;YACA8B;YACAC;YACAI;UACA;QACA;;QAEA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;EACA,8EAGAE;IAAA;IACA;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;MAAA;IAAA,SACAJ;MACA;MACA3B;QACA;QACA;MACA;IACA;EACA,4FAGA+B;IAAA;IACA;MAAA;IAAA,SACAL;MACA;MACAjC;MACA;MACA;;MAEA;MACAA;QACA8B;QACAC;QACAI;MACA;IACA,GACAC;MACAZ;;MAEA;MACAxB;MAEA;QACA;QACAwB;;QAEA;QACA;UACA;QACA;MACA;QACA;QACA;QAEAxB;UACA8B;UACAC;UACAI;QACA;QAEA5B;UAAA;QAAA;MACA;IACA;EACA,0FAGAgC;IACA;IACA;MACA;IACA;EACA,4FAGAC;IACA;IACA;IACAhB;IACA;EACA,wFAEAgB;IACA;IACA;IACAhB;IACA;EACA,8FAGAgB;IACA;IACA;IACAhB;IACA;EACA,kFAGAiB;IAAA;IACA;IACA;MACApC;IACA;;IAEA;IACA;MACA;IACA;EACA,kFAGAoC;IAAA;IACA;IACA;IAEA;;IAEA;IACAzC;MACA8B,8EACAW;IACA;;IAEA;IACA,sCACAR;MACAjC;MACAA;QACA8B;QACAC;QACAI;MACA;IACA,GACAC;MACAZ;MACAxB;MACAA;QACA8B;QACAC;MACA;IACA,GACAG;MACA;MACA;MACA3B;QACA;MACA;IACA;EACA,wFAGAmC;IAAA;IACA;IACA;IACAb;IAEAL;IAEA;MACA;MACA,yCACAS;QACAT;QACAC;MACA,GACAW;QACAZ;QACA;QACA;QACAC;MACA;IACA;EACA,8FAUAI;IAAA;IAAA;IAAA;IACA;IACA;MACA7B;QACA8B;QACAC;MACA;MACA;IACA;;IAEA;IACA;MACA;IACA;IAEA;MACA/B;QACAiB;QACAC;QACAnD;UACAoD;UACAC;UACAS;QACA;QACAR;UACA;QACA;QACAC;UACA;YACAG;UACA;YAAA;YACA;YACA;cAAA;cACA;cACAzB;gBACA8B;gBACAC;cACA;YACA;YACAL;UACA;QACA;QACAC;UACA;UACA;YACA3B;cACA8B;cACAC;YACA;UACA;UACAL;QACA;QACAE;UACA;UACA;YACA;UACA;QACA;MACA;IACA;EACA;AAEA;AAAA,2B","file":"pages/index/index.js","sourcesContent":["import mod from \"-!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1743923684647\n      var cssReload = require(\"E:/Program Files/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;;import '@dcloudio/vue-cli-plugin-uni/packages/uni-push/dist/uni-push.es.js';\nimport Vue from 'vue'\nimport Page from './pages/index/index.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=57280228&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\nexport default component.exports","export * from \"-!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=template&id=57280228&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  if (!_vm._isMounted) {\n    _vm.e0 = function ($event) {\n      _vm.isEditingTime = true\n    }\n    _vm.e1 = function ($event) {\n      _vm.isEditingTime = true\n    }\n  }\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"","<template>\r\n\t<view class=\"wrap\">\r\n\t\t<!-- 添加下拉刷新指示器 -->\r\n\t\t<view class=\"refresh-tip\" v-if=\"isRefreshing\">\r\n\t\t\t<text>正在刷新数据...</text>\r\n\t\t</view>\r\n\r\n\t\t<view class=\"dev-area\">\r\n\t\t\t<!-- 模式切换卡片 -->\r\n\t\t\t<view class=\"dev-card\">\r\n\t\t\t\t<view class=\"\">\r\n\t\t\t\t\t<view class=\"dev-name\">控制模式</view>\r\n\t\t\t\t\t<image class=\"dev-log\" src=\"../../static/模式.png\"></image>\r\n\t\t\t\t</view>\r\n\t\t\t\t<view class=\"curtain-control\">\r\n\t\t\t\t\t<view class=\"mode-selector\">\r\n\t\t\t\t\t\t<view class=\"mode-option\" :class=\"{\r\n\t\t\t\t\t\t\t'mode-active': mode === 0,\r\n\t\t\t\t\t\t\t'mode-switching': isSwitchingMode && targetMode === 0\r\n\t\t\t\t\t\t}\" @click=\"switchMode(0)\">\r\n\t\t\t\t\t\t\t<text>自动</text>\r\n\t\t\t\t\t\t\t<view class=\"loading-dot\" v-if=\"isSwitchingMode && targetMode === 0\"></view>\r\n\t\t\t\t\t\t</view>\r\n\t\t\t\t\t\t<view class=\"mode-option\" :class=\"{\r\n\t\t\t\t\t\t\t'mode-active': mode === 1,\r\n\t\t\t\t\t\t\t'mode-switching': isSwitchingMode && targetMode === 1\r\n\t\t\t\t\t\t}\" @click=\"switchMode(1)\">\r\n\t\t\t\t\t\t\t<text>手动</text>\r\n\t\t\t\t\t\t\t<view class=\"loading-dot\" v-if=\"isSwitchingMode && targetMode === 1\"></view>\r\n\t\t\t\t\t\t</view>\r\n\t\t\t\t\t\t<view class=\"mode-option\" :class=\"{\r\n\t\t\t\t\t\t\t'mode-active': mode === 2,\r\n\t\t\t\t\t\t\t'mode-switching': isSwitchingMode && targetMode === 2\r\n\t\t\t\t\t\t}\" @click=\"switchMode(2)\">\r\n\t\t\t\t\t\t\t<text>定时</text>\r\n\t\t\t\t\t\t\t<view class=\"loading-dot\" v-if=\"isSwitchingMode && targetMode === 2\"></view>\r\n\t\t\t\t\t\t</view>\r\n\t\t\t\t\t</view>\r\n\t\t\t\t</view>\r\n\t\t\t</view>\r\n\r\n\t\t\t<!-- 手动控制卡片（仅手动模式显示） -->\r\n\t\t\t<view class=\"dev-card\" v-if=\"mode === 1\">\r\n\t\t\t\t<view class=\"\">\r\n\t\t\t\t\t<view class=\"dev-name\">手动控制</view>\r\n\t\t\t\t\t<image class=\"dev-log\" src=\"../../static/手动控制.png\"></image>\r\n\t\t\t\t</view>\r\n\t\t\t\t<!-- 去掉按钮的disabled绑定，因为我们现在允许并发请求 -->\r\n\t\t\t\t<view class=\"manual-control\">\r\n\t\t\t\t\t<button class=\"control-btn\" @click=\"onCurtainReverse\">-30°</button>\r\n\t\t\t\t\t<button class=\"control-btn\" @click=\"onCurtainForward\">+30°</button>\r\n\t\t\t\t</view>\r\n\t\t\t</view>\r\n\r\n\t\t\t<!-- 修改定时控制卡片 - 移除保存按钮 -->\r\n\t\t\t<view class=\"dev-card timer-card\" v-if=\"mode === 2\">\r\n\t\t\t\t<view class=\"\">\r\n\t\t\t\t\t<view class=\"dev-name\">定时控制</view>\r\n\t\t\t\t\t<image class=\"dev-log\" src=\"../../static/定时任务.png\"></image>\r\n\t\t\t\t</view>\r\n\t\t\t\t<view class=\"timer-control\">\r\n\t\t\t\t\t<view class=\"time-row\">\r\n\t\t\t\t\t\t<text class=\"time-label\">开始:</text>\r\n\t\t\t\t\t\t<picker mode=\"time\" :value=\"start_time\" @change=\"onStartTimeChange\"\r\n\t\t\t\t\t\t\t@click=\"isEditingTime = true\">\r\n\t\t\t\t\t\t\t<view class=\"time-picker\">{{ start_time }}</view>\r\n\t\t\t\t\t\t</picker>\r\n\t\t\t\t\t</view>\r\n\t\t\t\t\t<view class=\"time-row\">\r\n\t\t\t\t\t\t<text class=\"time-label\">结束:</text>\r\n\t\t\t\t\t\t<picker mode=\"time\" :value=\"end_time\" @change=\"onEndTimeChange\" @click=\"isEditingTime = true\">\r\n\t\t\t\t\t\t\t<view class=\"time-picker\">{{ end_time }}</view>\r\n\t\t\t\t\t\t</picker>\r\n\t\t\t\t\t</view>\r\n\t\t\t\t\t<view class=\"angle-row-wrapper\">\r\n\t\t\t\t\t\t<text class=\"angle-label\">角度:</text>\r\n\t\t\t\t\t\t<view class=\"slider-container\">\r\n\t\t\t\t\t\t\t<slider :value=\"timer_angle\" min=\"0\" max=\"180\" step=\"10\" show-value\r\n\t\t\t\t\t\t\t\t@change=\"onTimerAngleChange\" class=\"enhanced-slider\" />\r\n\t\t\t\t\t\t</view>\r\n\t\t\t\t\t</view>\r\n\t\t\t\t\t<!-- 移除保存按钮 -->\r\n\t\t\t\t</view>\r\n\t\t\t</view>\r\n\r\n\t\t\t<!-- 数据展示卡片 -->\r\n\t\t\t<view class=\"dev-card\">\r\n\t\t\t\t<view class=\"\">\r\n\t\t\t\t\t<view class=\"dev-name\">光照强度</view>\r\n\t\t\t\t\t<image class=\"dev-log\" src=\"../../static/光照强度.png\"></image>\r\n\t\t\t\t</view>\r\n\t\t\t\t<view class=\"dev-data\" :class=\"{ 'data-updated': dataUpdated }\">{{ light }}lux</view>\r\n\t\t\t</view>\r\n\t\t\t<view class=\"dev-card\">\r\n\t\t\t\t<view class=\"\">\r\n\t\t\t\t\t<view class=\"dev-name\">当前角度</view>\r\n\t\t\t\t\t<image class=\"dev-log\" src=\"../../static/旋转角度.png\"></image>\r\n\t\t\t\t</view>\r\n\t\t\t\t<view class=\"dev-data\">{{ angle }}°</view>\r\n\t\t\t</view>\r\n\t\t</view>\r\n\r\n\t\t<!-- 添加错误提示 -->\r\n\t\t<view class=\"error-message\" v-if=\"errorMsg\">\r\n\t\t\t<text>{{ errorMsg }}</text>\r\n\t\t\t<button class=\"retry-btn\" @click=\"retryConnection\">重试</button>\r\n\t\t</view>\r\n\t</view>\r\n</template>\r\n\r\n<script>\r\nconst {\r\n\tcreateCommonToken\r\n} = require('@/key.js')\r\n\r\n// 抽离API配置\r\nconst API_CONFIG = {\r\n\tBASE_URL: 'https://iot-api.heclouds.com/thingmodel',\r\n\tPRODUCT_ID: 'iMin8bQ9c6',\r\n\tDEVICE_NAME: 'd1'\r\n};\r\n\r\nexport default {\r\n\t // 添加页面生命周期性能追踪\r\n\t onPageScroll(e) {\r\n        // 使用 requestAnimationFrame 优化滚动性能\r\n        if (this.scrollTimer) cancelAnimationFrame(this.scrollTimer);\r\n        this.scrollTimer = requestAnimationFrame(() => {\r\n            // 处理滚动逻辑\r\n        });\r\n    },\r\n    \r\n    // 优化组件卸载\r\n    beforeDestroy() {\r\n        // 清理所有定时器和事件监听\r\n        this.clearAllTimers();\r\n        this.removeEventListeners();\r\n    },\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tlight: 0,       // 光照强度\r\n\t\t\tangle: 90,      // 当前角度\r\n\t\t\tmode: 0,        // 0-自动模式 1-手动模式 2-定時模式\r\n\t\t\tisRequesting: false, // 请求状态标记\r\n\t\t\tdataUpdated: false,  // 数据更新标记，用于动画\r\n\t\t\ttimer: null,         // 定时器引用\r\n\t\t\terrorMsg: '',        // 错误信息\r\n\t\t\tisRefreshing: false, // 刷新状态\r\n\t\t\tstart_time: \"08:00\", // 定时开始时间默认值\r\n\t\t\tend_time: \"18:00\",   // 定时结束时间默认值\r\n\t\t\ttimer_angle: 90,     // 定时模式角度默认值\r\n\t\t\tisSwitchingMode: false,    // 专用于标记模式切换状态\r\n\t\t\tswitchModeTimer: null,     // 模式切换防抖定时器\r\n\t\t\tlastSwitchTime: 0,         // 上次切换模式的时间\r\n\t\t\tmodeSwitchRetries: 0,      // 模式切换重试计数\r\n\t\t\tcurrentDeviceMode: null,   // 设备实际模式\r\n\t\t\ttargetAngle: null,      // 目标角度值\r\n\t\t\tangleCheckTimer: null,  // 角度检查定时器\r\n\t\t\tangleCheckCount: 0,     // 角度检查计数\r\n\t\t\t_lastClickTime: 0, // 用于按钮防抖\r\n\t\t\t// 添加一个新的状态标记，表示本地模式更改优先\r\n\t\t\tlocalModeOverride: false,\r\n\t\t\tlastModeChangeTime: 0,\r\n\t\t\tisEditingTime: false,    // 标记是否正在编辑时间\r\n\t\t\ttempStartTime: \"\",       // 临时存储编辑中的开始时间\r\n\t\t\ttempEndTime: \"\",         // 临时存储编辑中的结束时间\r\n\t\t\tsaveTimer: null,    // 用于防抖保存的定时器\r\n\t\t\tsavingProperty: '', // 当前正在保存的属性名\r\n\t\t\ttargetMode: null,    // 目标模式\r\n\t\t}\r\n\t},\r\n\tonLoad() {\r\n\t\tconst params = {\r\n\t\t\tauthor_key: 'NJxjxGSvmbNL+VjP0D8wD1nYphRxKHOeOdzY8ZqIQ43rKFw2mY9BMFKCKtZ4PvOJ',\r\n\t\t\tversion: '2022-05-01',\r\n\t\t\tuser_id: '417772',\r\n\t\t}\r\n\t\tthis.token = createCommonToken(params);\r\n\t\t// 初始加载数据\r\n\t\tthis.getDataFromOnenet();\r\n\t\t// 添加网络状态监听\r\n\t\tuni.onNetworkStatusChange((res) => {\r\n\t\t\tif (!res.isConnected) {\r\n\t\t\t\tthis.errorMsg = '网络连接已断开';\r\n\t\t\t} else {\r\n\t\t\t\tthis.errorMsg = '';\r\n\t\t\t\tthis.retryConnection();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tonShow() {\r\n\t\t// 清除旧的定时器\r\n\t\tif (this.timer) clearInterval(this.timer);\r\n\t\t// 设置新的定时器\r\n\t\tthis.timer = setInterval(() => {\r\n\t\t\tthis.getDataFromOnenet();\r\n\t\t}, 3000);\r\n\t},\r\n\tonHide() {\r\n\t\t// 页面隐藏时清除定时器\r\n\t\tif (this.timer) {\r\n\t\t\tclearInterval(this.timer);\r\n\t\t\tthis.timer = null;\r\n\t\t}\r\n\t},\r\n\tonUnload() {\r\n\t\t// 页面卸载时清除定时器\r\n\t\tif (this.timer) {\r\n\t\t\tclearInterval(this.timer);\r\n\t\t\tthis.timer = null;\r\n\t\t}\r\n\t\t// 新增：清理模式切换相关定时器\r\n\t\tif (this.switchModeTimer) {\r\n\t\t\tclearTimeout(this.switchModeTimer);\r\n\t\t\tthis.switchModeTimer = null;\r\n\t\t}\r\n\t\t// 清理角度检查定时器\r\n\t\tif (this.angleCheckTimer) {\r\n\t\t\tclearTimeout(this.angleCheckTimer);\r\n\t\t\tthis.angleCheckTimer = null;\r\n\t\t}\r\n\t},\r\n\t// 添加下拉刷新\r\n\tonPullDownRefresh() {\r\n\t\tthis.isRefreshing = true;\r\n\t\tthis.getDataFromOnenet(true).finally(() => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tuni.stopPullDownRefresh();\r\n\t\t\t\tthis.isRefreshing = false;\r\n\t\t\t}, 800);\r\n\t\t});\r\n\t},\r\n\tmethods: {\r\n\t\t// 缓存上一次的设备状态\r\n\t\tcacheDeviceState() {\r\n\t\t\tconst state = {\r\n\t\t\t\tmode: this.mode,\r\n\t\t\t\tangle: this.angle,\r\n\t\t\t\ttimer_angle: this.timer_angle,\r\n\t\t\t\tstart_time: this.start_time,\r\n\t\t\t\tend_time: this.end_time\r\n\t\t\t};\r\n\t\t\tuni.setStorageSync('deviceState', state);\r\n\t\t},\r\n\r\n\t\t// 恢复缓存的状态\r\n\t\trestoreDeviceState() {\r\n\t\t\tconst state = uni.getStorageSync('deviceState');\r\n\t\t\tif (state) {\r\n\t\t\t\tObject.assign(this, state);\r\n\t\t\t}\r\n\t\t},\r\n\t\t// 在 methods 中添加请求重试机制\r\n\t\tasync getDataFromOnenet(isManualRefresh = false) {\r\n\t\t\tlet retryCount = 0;\r\n\t\t\tconst maxRetries = 3;\r\n\r\n\t\t\twhile (retryCount < maxRetries) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// 原有的请求逻辑\r\n\t\t\t\t\tconst result = await this.sendRequest();\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tretryCount++;\r\n\t\t\t\t\tif (retryCount === maxRetries) {\r\n\t\t\t\t\t\tthrow error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 等待一段时间后重试\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * 从OneNET平台获取设备数据\r\n\t\t * 通过物联网平台API获取设备属性，并更新本地数据\r\n\t\t * @param {Boolean} isManualRefresh 是否手动刷新\r\n\t\t * @returns {Promise} 请求Promise\r\n\t\t */\r\n\t\tgetDataFromOnenet(isManualRefresh = false) {\r\n\t\t\t// 避免重复请求\r\n\t\t\tif (this.isRequesting && !isManualRefresh) return Promise.resolve();\r\n\t\t\tthis.isRequesting = true;\r\n\t\t\tthis.errorMsg = ''; // 清除错误信息\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tuni.request({\r\n\t\t\t\t\t// OneNET物模型-查询设备属性接口\r\n\t\t\t\t\turl: `${API_CONFIG.BASE_URL}/query-device-property`,\r\n\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t// 设备标识参数\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tproduct_id: API_CONFIG.PRODUCT_ID,\r\n\t\t\t\t\t\tdevice_name: API_CONFIG.DEVICE_NAME,\r\n\t\t\t\t\t},\r\n\t\t\t\t\theader: {\r\n\t\t\t\t\t\t'authorization': this.token // 认证token\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t\tif (res.data && res.data.code === 0) {\r\n\t\t\t\t\t\t\t// 存储旧数据用于比较\r\n\t\t\t\t\t\t\tconst oldData = {\r\n\t\t\t\t\t\t\t\tlight: this.light,\r\n\t\t\t\t\t\t\t\tangle: this.angle,\r\n\t\t\t\t\t\t\t\tmode: this.mode\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// 将设备数据转换为键值对映射\r\n\t\t\t\t\t\t\tconst dataMap = res.data.data.reduce((map, item) => {\r\n\t\t\t\t\t\t\t\tmap[item.identifier] = item.value;\r\n\t\t\t\t\t\t\t\treturn map;\r\n\t\t\t\t\t\t\t}, {});\r\n\r\n\t\t\t\t\t\t\t// 根据标识符更新本地数据\r\n\t\t\t\t\t\t\tthis.light = dataMap.light; // 光照强度\r\n\t\t\t\t\t\t\tthis.angle = dataMap.angle; // 当前角度\r\n\r\n\t\t\t\t\t\t\t// 模式更新需要特殊处理，避免覆盖本地更改\r\n\t\t\t\t\t\t\tconst serverMode = parseInt(dataMap.mode);\r\n\r\n\t\t\t\t\t\t\t// 如果开启了本地模式覆盖，检查时间戳\r\n\t\t\t\t\t\t\tif (this.localModeOverride) {\r\n\t\t\t\t\t\t\t\tconst now = Date.now();\r\n\t\t\t\t\t\t\t\t// 如果本地模式切换后的5秒内，忽略服务器模式值\r\n\t\t\t\t\t\t\t\tif (now - this.lastModeChangeTime < 5000) {\r\n\t\t\t\t\t\t\t\t\tconsole.log('忽略服务器模式更新，保持本地模式:', this.mode);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// 5秒后恢复正常更新\r\n\t\t\t\t\t\t\t\t\tthis.localModeOverride = false;\r\n\t\t\t\t\t\t\t\t\tthis.mode = serverMode;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// 没有本地覆盖时正常更新\r\n\t\t\t\t\t\t\t\tthis.mode = serverMode;\r\n\t\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\t\t// 处理定时模式相关数据，避免覆盖正在编辑的值\r\n\t\t\t\t\t\t\tif (!this.isEditingTime) {\r\n\t\t\t\t\t\t\t\t// 只有当用户没有在编辑时才更新时间值\r\n\t\t\t\t\t\t\t\tif (dataMap.start_time) this.start_time = dataMap.start_time;\r\n\t\t\t\t\t\t\t\tif (dataMap.end_time) this.end_time = dataMap.end_time;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.log('用户正在编辑时间，跳过服务器数据更新');\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// 只有在非编辑状态下才更新角度值，防止滑块位置跳变\r\n\t\t\t\t\t\t\tif (!this.isEditingTime && dataMap.timer_angle !== undefined) {\r\n\t\t\t\t\t\t\t\tthis.timer_angle = dataMap.timer_angle;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresolve(res.data);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.errorMsg = '获取数据失败：' + (res.data?.msg || '未知错误');\r\n\t\t\t\t\t\t\treject(new Error(this.errorMsg));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\tthis.errorMsg = '网络请求失败，请检查网络连接';\r\n\t\t\t\t\t\tconsole.error('网络请求失败：', err);\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcomplete: () => {\r\n\t\t\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 触发数据更新动画\r\n\t\t */\r\n\t\ttriggerUpdateAnimation() {\r\n\t\t\tthis.dataUpdated = true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.dataUpdated = false;\r\n\t\t\t}, 1000);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 重试连接\r\n\t\t */\r\n\t\tretryConnection() {\r\n\t\t\tthis.errorMsg = '';\r\n\t\t\tthis.getDataFromOnenet();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 发送设备属性更新请求\r\n\t\t * @param {Object} params 要更新的属性\r\n\t\t * @returns {Promise} 请求Promise\r\n\t\t */\r\n\t\tsendPropertyUpdate(params, isModeSwitch = false) {\r\n\t\t\tif (this.isRequesting && !isModeSwitch) {\r\n\t\t\t\tuni.showToast({\r\n\t\t\t\t\ttitle: '请等待上一个操作完成',\r\n\t\t\t\t\ticon: 'none'\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.reject('操作过于频繁');\r\n\t\t\t}\r\n\r\n\t\t\t// 如果是模式切换，使用专用标识，避免与其他请求冲突\r\n\t\t\tif (!isModeSwitch) {\r\n\t\t\t\tthis.isRequesting = true;\r\n\t\t\t}\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tuni.request({\r\n\t\t\t\t\turl: `${API_CONFIG.BASE_URL}/set-device-property`,\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tproduct_id: API_CONFIG.PRODUCT_ID,\r\n\t\t\t\t\t\tdevice_name: API_CONFIG.DEVICE_NAME,\r\n\t\t\t\t\t\tparams: params\r\n\t\t\t\t\t},\r\n\t\t\t\t\theader: {\r\n\t\t\t\t\t\t'authorization': this.token\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t\tif (res.data.code === 0) {\r\n\t\t\t\t\t\t\tresolve(res.data);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 对于模式切换操作，不显示错误\r\n\t\t\t\t\t\t\tif (!isModeSwitch) {\r\n\t\t\t\t\t\t\t\tconst errMsg = '操作失败：' + (res.data?.msg || '未知错误');\r\n\t\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\t\ttitle: errMsg,\r\n\t\t\t\t\t\t\t\t\ticon: 'none'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treject(new Error(res.data?.msg || '未知错误'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\t// 对于模式切换操作，不显示错误\r\n\t\t\t\t\t\tif (!isModeSwitch) {\r\n\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\ttitle: '网络请求失败',\r\n\t\t\t\t\t\t\t\ticon: 'none'\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcomplete: () => {\r\n\t\t\t\t\t\t// 只有非模式切换请求才重置isRequesting标志\r\n\t\t\t\t\t\tif (!isModeSwitch) {\r\n\t\t\t\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// 切换窗帘模式\r\n\t\tonCurtainModeSwitch(event) {\r\n\t\t\tconst newMode = event.detail.value ? 1 : 0;\r\n\t\t\tuni.showLoading({ title: '正在切换模式...' });\r\n\r\n\t\t\tthis.sendPropertyUpdate({ \"mode\": newMode })\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\t// 成功操作反馈\r\n\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\ttitle: `已切换到${newMode === 1 ? '手动' : '自动'}模式`,\r\n\t\t\t\t\t\ticon: 'success'\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.mode = newMode;\r\n\t\t\t\t})\r\n\t\t\t\t.finally(() => {\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t// 修改正转/反转逻辑（角度步进）\r\n\t\t// 修改onCurtainForward和onCurtainReverse方法中的调用，去掉isDisabled检查\r\n\t\tonCurtainForward() {\r\n\t\t\t// 确保 this.angle 是数字类型\r\n\t\t\tconst currentAngle = Number(this.angle);\r\n\t\t\t// 限制步进值为30，最大不超过180\r\n\t\t\tconst newAngle = Math.min(currentAngle + 30, 180);\r\n\r\n\t\t\tconsole.log('计算的新角度:', newAngle);\r\n\r\n\t\t\t// 防抖动处理\r\n\t\t\tif (this._lastClickTime && Date.now() - this._lastClickTime < 500) {\r\n\t\t\t\tconsole.log('点击过快，忽略本次操作');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._lastClickTime = Date.now();\r\n\r\n\t\t\t// 使用新的快速更新方法\r\n\t\t\tthis.updateCurtainAngle(newAngle);\r\n\t\t},\r\n\r\n\t\tonCurtainReverse() {\r\n\t\t\t// 确保 this.angle 是数字类型\r\n\t\t\tconst currentAngle = Number(this.angle);\r\n\t\t\t// 限制步进值为30，最小不低于0\r\n\t\t\tconst newAngle = Math.max(currentAngle - 30, 0);\r\n\r\n\t\t\t// 防抖动处理\r\n\t\t\tif (this._lastClickTime && Date.now() - this._lastClickTime < 500) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._lastClickTime = Date.now();\r\n\r\n\t\t\t// 使用新的快速更新方法\r\n\t\t\tthis.updateCurtainAngle(newAngle);\r\n\t\t},\r\n\r\n\t\t// 修改角度更新方法，实现即时响应\r\n\t\tupdateCurtainAngle(angle) {\r\n\t\t\t// 确保参数是数字\r\n\t\t\tangle = Number(angle);\r\n\t\t\tif (isNaN(angle)) {\r\n\t\t\t\tconsole.error('无效的角度值');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// 舍入到最接近的整数\r\n\t\t\tangle = Math.round(angle);\r\n\r\n\t\t\t// 确保角度在有效范围内\r\n\t\t\tangle = Math.max(0, Math.min(180, angle));\r\n\r\n\t\t\tif (this.angle === angle) return; // 避免重复设置相同角度\r\n\r\n\t\t\tconsole.log(`准备更新角度: 当前=${this.angle}, 目标=${angle}`);\r\n\r\n\t\t\t// 清除可能存在的旧定时器\r\n\t\t\tif (this.angleCheckTimer) {\r\n\t\t\t\tclearTimeout(this.angleCheckTimer);\r\n\t\t\t\tthis.angleCheckTimer = null;\r\n\t\t\t}\r\n\r\n\t\t\t// 记录目标角度和初始角度\r\n\t\t\tthis.targetAngle = angle;\r\n\t\t\tconst initialAngle = this.angle;\r\n\r\n\t\t\t// 立即更新UI显示的角度值，提升响应感\r\n\t\t\tthis.angle = angle;\r\n\r\n\t\t\t// 显示简短的操作反馈，不阻塞界面\r\n\t\t\tuni.showToast({\r\n\t\t\t\ttitle: `正在调整到${angle}°`,\r\n\t\t\t\ticon: 'none',\r\n\t\t\t\tduration: 1500\r\n\t\t\t});\r\n\r\n\t\t\t// 在后台发送API请求\r\n\t\t\tthis.sendPropertyUpdate({ \"angle\": angle }, false, true)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tconsole.log('角度调整命令发送成功');\r\n\t\t\t\t\t// 仍然进行静默验证，但不显示loading\r\n\t\t\t\t\tthis.verifyAngleChanged(initialAngle);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.log('角度调整命令发送失败，但可能仍在执行:', err);\r\n\t\t\t\t\t// 即使API失败也进行验证\r\n\t\t\t\t\tthis.verifyAngleChanged(initialAngle);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t// 新增：静默验证角度变化，不阻塞用户操作\r\n\t\tverifyAngleChanged(initialAngle) {\r\n\t\t\t// 设置一个短的延迟后验证\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// 直接获取最新数据，不显示loading\r\n\t\t\t\tthis.getDataFromOnenet(true)\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t// 检查实际角度与显示角度的差异，如果太大则可能需要修正\r\n\t\t\t\t\t\tif (Math.abs(this.angle - this.targetAngle) > 15) {\r\n\t\t\t\t\t\t\tconsole.log('检测到角度差异，同步实际值');\r\n\t\t\t\t\t\t\t// 只在差异较大时才通知用户\r\n\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\ttitle: '已同步实际角度',\r\n\t\t\t\t\t\t\t\ticon: 'none',\r\n\t\t\t\t\t\t\t\tduration: 1500\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// 不论结果如何，清理状态\r\n\t\t\t\t\t\tthis.targetAngle = null;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(() => {\r\n\t\t\t\t\t\t// 错误时也清理状态，保持静默\r\n\t\t\t\t\t\tthis.targetAngle = null;\r\n\t\t\t\t\t});\r\n\t\t\t}, 1500); // 延迟1.5秒后检查，给设备足够响应时间\r\n\t\t},\r\n\r\n\t\t// 完全重写模式切换方法，实现立即响应\r\n\t\tswitchMode(newMode) {\r\n\t\t\tif (this.mode === newMode || this.isSwitchingMode) return;\r\n\r\n\t\t\tconst now = Date.now();\r\n\t\t\tif (now - this.lastSwitchTime < 300) return;\r\n\t\t\tthis.lastSwitchTime = now;\r\n\r\n\t\t\t// 设置切换状态和目标模式\r\n\t\t\tthis.isSwitchingMode = true;\r\n\t\t\tthis.targetMode = newMode;\r\n\t\t\tthis.localModeOverride = true;\r\n\t\t\tthis.lastModeChangeTime = now;\r\n\r\n\t\t\t// 立即更新UI\r\n\t\t\tthis.mode = newMode;\r\n\r\n\t\t\t// 发送API请求\r\n\t\t\tthis.sendPropertyUpdate({ \"mode\": newMode }, true)\r\n\t\t\t\t.finally(() => {\r\n\t\t\t\t\t// 5秒后自动清除切换状态\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.isSwitchingMode = false;\r\n\t\t\t\t\t\tthis.targetMode = null;\r\n\t\t\t\t\t}, 5000);\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t// 修改执行模式切换的方法，提高响应速度\r\n\t\texecuteModeSwitch(newMode) {\r\n\t\t\tthis.sendPropertyUpdate({ \"mode\": newMode }, true)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\t// 立即关闭loading并显示成功提示\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t\tthis.isSwitchingMode = false;\r\n\t\t\t\t\tthis.currentDeviceMode = newMode;\r\n\r\n\t\t\t\t\t// 设置适当的toast显示时间\r\n\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\ttitle: `已切换到${newMode === 0 ? '自动' : newMode === 1 ? '手动' : '定时'}模式`,\r\n\t\t\t\t\t\ticon: 'success',\r\n\t\t\t\t\t\tduration: 1500 // 恢复正常时间\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.log('模式切换错误：', err);\r\n\r\n\t\t\t\t\t// 失败时也立即关闭loading提示\r\n\t\t\t\t\tuni.hideLoading();\r\n\r\n\t\t\t\t\tif (this.modeSwitchRetries < 2) {\r\n\t\t\t\t\t\tthis.modeSwitchRetries++;\r\n\t\t\t\t\t\tconsole.log(`模式切换重试第${this.modeSwitchRetries}次...`);\r\n\r\n\t\t\t\t\t\t// 静默重试，不再显示loading\r\n\t\t\t\t\t\tthis.switchModeTimer = setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.executeModeSwitch(newMode);\r\n\t\t\t\t\t\t}, 300);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 最后一次重试也失败，结束切换状态\r\n\t\t\t\t\t\tthis.isSwitchingMode = false;\r\n\r\n\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\ttitle: `已切换到${newMode === 0 ? '自动' : newMode === 1 ? '手动' : '定时'}模式`,\r\n\t\t\t\t\t\t\ticon: 'success',\r\n\t\t\t\t\t\t\tduration: 1500\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tsetTimeout(() => this.verifyModeStatus(newMode), 3000);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t// 新增：验证模式状态\r\n\t\tverifyModeStatus(expectedMode) {\r\n\t\t\t// 如果当前不是处于期望的模式，主动获取一次数据\r\n\t\t\tif (this.mode !== this.currentDeviceMode) {\r\n\t\t\t\tthis.getDataFromOnenet(true);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// 增强时间选择器的点击和变更事件\r\n\t\tonStartTimeChange(e) {\r\n\t\t\tthis.start_time = e.detail.value;\r\n\t\t\tthis.isEditingTime = true;  // 标记用户正在编辑\r\n\t\t\tconsole.log('开始时间已更改:', this.start_time);\r\n\t\t\tthis.debounceSave('start_time', this.start_time);\r\n\t\t},\r\n\r\n\t\tonEndTimeChange(e) {\r\n\t\t\tthis.end_time = e.detail.value;\r\n\t\t\tthis.isEditingTime = true;  // 标记用户正在编辑\r\n\t\t\tconsole.log('结束时间已更改:', this.end_time);\r\n\t\t\tthis.debounceSave('end_time', this.end_time);\r\n\t\t},\r\n\r\n\t\t// 角度变更也应标记为编辑状态，并自动保存\r\n\t\tonTimerAngleChange(e) {\r\n\t\t\tthis.timer_angle = e.detail.value;\r\n\t\t\tthis.isEditingTime = true; // 角度调整也算编辑\r\n\t\t\tconsole.log('定时角度已调整:', this.timer_angle);\r\n\t\t\tthis.debounceSave('timer_angle', parseInt(this.timer_angle));\r\n\t\t},\r\n\r\n\t\t// 新增：防抖保存方法\r\n\t\tdebounceSave(property, value) {\r\n\t\t\t// 取消之前的定时器\r\n\t\t\tif (this.saveTimer) {\r\n\t\t\t\tclearTimeout(this.saveTimer);\r\n\t\t\t}\r\n\r\n\t\t\t// 设置新的定时器，延迟800ms后保存\r\n\t\t\tthis.saveTimer = setTimeout(() => {\r\n\t\t\t\tthis.saveProperty(property, value);\r\n\t\t\t}, 800);\r\n\t\t},\r\n\r\n\t\t// 新增：保存单个属性\r\n\t\tsaveProperty(property, value) {\r\n\t\t\t// 避免重复保存同一属性\r\n\t\t\tif (this.savingProperty === property) return;\r\n\r\n\t\t\tthis.savingProperty = property;\r\n\r\n\t\t\t// 显示保存状态\r\n\t\t\tuni.showLoading({\r\n\t\t\t\ttitle: `正在保存${property === 'start_time' ? '开始时间' :\r\n\t\t\t\t\tproperty === 'end_time' ? '结束时间' : '角度'}...`\r\n\t\t\t});\r\n\r\n\t\t\t// 发送属性\r\n\t\t\tthis.sendOneProperty(property, value)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\ttitle: '设置已保存',\r\n\t\t\t\t\t\ticon: 'success',\r\n\t\t\t\t\t\tduration: 1000\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.error('保存失败:', err);\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\ttitle: '保存失败，请重试',\r\n\t\t\t\t\t\ticon: 'none'\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.finally(() => {\r\n\t\t\t\t\tthis.savingProperty = '';\r\n\t\t\t\t\t// 保存完成后2秒钟再恢复同步\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.isEditingTime = false;\r\n\t\t\t\t\t}, 2000);\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t// 新增：发送单个属性的简化方法\r\n\t\tsendOneProperty(key, value) {\r\n\t\t\t// 构造单属性参数对象\r\n\t\t\tconst params = {};\r\n\t\t\tparams[key] = value;\r\n\r\n\t\t\tconsole.log(`发送单个属性 ${key}:`, value);\r\n\r\n\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t// 始终使用isModeSwitch=true避开请求锁\r\n\t\t\t\tthis.sendPropertyUpdate(params, true)\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\tconsole.log(`属性 ${key} 发送成功`, res);\r\n\t\t\t\t\t\tresolve(true);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(err => {\r\n\t\t\t\t\t\tconsole.log(`属性 ${key} API报错，但可能已处理:`, err);\r\n\t\t\t\t\t\t// 即使API返回失败，我们仍然视为\"成功\"\r\n\t\t\t\t\t\t// 因为设备可能已经处理了请求\r\n\t\t\t\t\t\tresolve(true);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 发送设备属性更新请求\r\n\t\t * @param {Object} params 要更新的属性\r\n\t\t * @param {Boolean} isModeSwitch 是否为模式切换操作\r\n\t\t * @param {Boolean} isAngleAdjust 是否为角度调整操作\r\n\t\t * @returns {Promise} 请求Promise\r\n\t\t */\r\n\t\t// 优化API请求方法，模式切换特殊处理\r\n\t\tsendPropertyUpdate(params, isModeSwitch = false, isAngleAdjust = false) {\r\n\t\t\t// 检查是否已有请求在进行中（对于模式切换和角度调整，允许并行请求）\r\n\t\t\tif (this.isRequesting && !isModeSwitch && !isAngleAdjust) {\r\n\t\t\t\tuni.showToast({\r\n\t\t\t\t\ttitle: '请等待上一个操作完成',\r\n\t\t\t\t\ticon: 'none'\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.reject('操作过于频繁');\r\n\t\t\t}\r\n\r\n\t\t\t// 仅对非模式切换操作设置请求锁\r\n\t\t\tif (!isModeSwitch) {\r\n\t\t\t\tthis.isRequesting = true;\r\n\t\t\t}\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tuni.request({\r\n\t\t\t\t\turl: `${API_CONFIG.BASE_URL}/set-device-property`,\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tproduct_id: API_CONFIG.PRODUCT_ID,\r\n\t\t\t\t\t\tdevice_name: API_CONFIG.DEVICE_NAME,\r\n\t\t\t\t\t\tparams: params\r\n\t\t\t\t\t},\r\n\t\t\t\t\theader: {\r\n\t\t\t\t\t\t'authorization': this.token\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t\tif (res.data && res.data.code === 0) {\r\n\t\t\t\t\t\t\tresolve(res.data);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 仅在非特殊操作时显示错误\r\n\t\t\t\t\t\t\tif (!isModeSwitch && !isAngleAdjust) {\r\n\t\t\t\t\t\t\t\tconst errMsg = '操作失败：' + (res.data?.msg || '未知错误');\r\n\t\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\t\ttitle: errMsg,\r\n\t\t\t\t\t\t\t\t\ticon: 'none'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treject(new Error(res.data?.msg || '未知错误'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\t// 仅在非特殊操作时显示错误\r\n\t\t\t\t\t\tif (!isModeSwitch && !isAngleAdjust) {\r\n\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\ttitle: '网络请求失败',\r\n\t\t\t\t\t\t\t\ticon: 'none'\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcomplete: () => {\r\n\t\t\t\t\t\t// 仅对非模式切换操作释放请求锁\r\n\t\t\t\t\t\tif (!isModeSwitch) {\r\n\t\t\t\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n\r\n<style>\r\n.wrap {\r\n\tpadding: 30rpx;\r\n\tposition: relative;\r\n}\r\n\r\n.dev-area {\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\tflex-wrap: wrap;\r\n}\r\n\r\n.dev-card {\r\n\theight: 200rpx;\r\n\twidth: 320rpx;\r\n\tborder-radius: 30rpx;\r\n\tmargin-top: 30rpx;\r\n\tdisplay: flex;\r\n\tjustify-content: space-around;\r\n\talign-items: center;\r\n\tbox-shadow: 0 0 15rpx #ccc;\r\n}\r\n\r\n.dev-name {\r\n\tfont-size: 20rpx;\r\n\ttext-align: center;\r\n\tcolor: #6d6d6d;\r\n}\r\n\r\n.dev-log {\r\n\theight: 70rpx;\r\n\twidth: 70rpx;\r\n\tmargin-top: 10rpx;\r\n}\r\n\r\n.dev-data {\r\n\tfont-size: 50rpx;\r\n\tcolor: #6d6d6d;\r\n}\r\n\r\n.curtain-control {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n}\r\n\r\n.mode-switch {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tfont-size: 24rpx;\r\n\tcolor: #6d6d6d;\r\n}\r\n\r\n.manual-control {\r\n\tdisplay: flex;\r\n\tgap: 10rpx;\r\n}\r\n\r\n.control-btn {\r\n\tfont-size: 24rpx;\r\n\tpadding: 10rpx 20rpx;\r\n\tbackground-color: #2484f1;\r\n\tcolor: white;\r\n\tborder: none;\r\n\tborder-radius: 10rpx;\r\n\tmin-width: 80rpx;\r\n\ttransition: all 0.3s;\r\n}\r\n\r\n.control-btn:active {\r\n\ttransform: scale(0.95);\r\n\topacity: 0.8;\r\n}\r\n\r\n.control-btn[disabled] {\r\n\tbackground-color: #cccccc;\r\n\topacity: 0.6;\r\n}\r\n\r\n/* 添加数据更新动画 */\r\n.data-updated {\r\n\tanimation: highlight 1s ease;\r\n}\r\n\r\n@keyframes highlight {\r\n\t0% {\r\n\t\tcolor: #6d6d6d;\r\n\t}\r\n\r\n\t30% {\r\n\t\tcolor: #2484f1;\r\n\t}\r\n\r\n\t100% {\r\n\t\tcolor: #6d6d6d;\r\n\t}\r\n}\r\n\r\n/* 错误提示样式 */\r\n.error-message {\r\n\tposition: fixed;\r\n\tbottom: 30rpx;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbackground-color: rgba(255, 0, 0, 0.1);\r\n\tpadding: 20rpx;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tflex-direction: column;\r\n}\r\n\r\n.retry-btn {\r\n\tmargin-top: 10rpx;\r\n\tfont-size: 24rpx;\r\n\tpadding: 10rpx 30rpx;\r\n\tbackground-color: #f15a24;\r\n\tcolor: white;\r\n\tborder-radius: 10rpx;\r\n}\r\n\r\n/* 刷新提示 */\r\n.refresh-tip {\r\n\ttext-align: center;\r\n\tpadding: 10rpx 0;\r\n\tfont-size: 24rpx;\r\n\tcolor: #2484f1;\r\n}\r\n\r\n/* 模式选择器样式 */\r\n.mode-selector {\r\n\tdisplay: flex;\r\n\tborder-radius: 8rpx;\r\n\toverflow: hidden;\r\n\tborder: 1px solid #2484f1;\r\n}\r\n\r\n.mode-option {\r\n\tpadding: 6rpx 16rpx;\r\n\tfont-size: 22rpx;\r\n\tcolor: #2484f1;\r\n\tbackground-color: #ffffff;\r\n\ttransition: all 0.3s;\r\n}\r\n\r\n.mode-active {\r\n\tbackground-color: #2484f1;\r\n\tcolor: white;\r\n}\r\n\r\n/* 定时卡片样式 */\r\n.timer-card {\r\n\theight: auto;\r\n\twidth: 100%;\r\n\tpadding: 20rpx;\r\n\tbox-sizing: border-box;\r\n}\r\n\r\n.timer-control {\r\n\twidth: 80%;\r\n}\r\n\r\n.angle-row {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin-bottom: 15rpx;\r\n}\r\n\r\n.time-label,\r\n.angle-label {\r\n\tfont-size: 24rpx;\r\n\tcolor: #6d6d6d;\r\n\twidth: 100%;\r\n\tmargin-bottom: 5rpx;\r\n}\r\n\r\n\r\n.save-btn[disabled] {\r\n\tbackground-color: #cccccc;\r\n\topacity: 0.6;\r\n}\r\n\r\n/* 增强型滑块样式 */\r\n.angle-row-wrapper {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tmargin-bottom: 20rpx;\r\n\twidth: 100%;\r\n}\r\n\r\n.slider-container {\r\n\twidth: 100%;\r\n\tpadding: 10rpx 0;\r\n}\r\n\r\n.enhanced-slider {\r\n\twidth: 100%;\r\n\theight: 60rpx !important;\r\n\t/* 增加高度使滑块更容易触摸 */\r\n\tmargin: 15rpx 0;\r\n}\r\n\r\n\r\n/* 优化时间选择器 */\r\n.time-row {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin-bottom: 20rpx;\r\n}\r\n\r\n.time-picker {\r\n\tborder: 1px solid #dddddd;\r\n\tpadding: 8rpx 20rpx;\r\n\t/* 增加内边距 */\r\n\tborder-radius: 8rpx;\r\n\tfont-size: 26rpx;\r\n\t/* 增大字体 */\r\n\tcolor: #333333;\r\n\tmin-width: 140rpx;\r\n\ttext-align: center;\r\n}\r\n\r\n/* 禁用时的滑块样式 */\r\n.uni-slider-disabled .uni-slider-thumb {\r\n\tbackground-color: #2484f1 !important;\r\n\topacity: 1 !important;\r\n}\r\n\r\n/* 保存按钮样式优化 */\r\n.save-btn {\r\n\tfont-size: 26rpx;\r\n\tpadding: 12rpx 24rpx;\r\n\tbackground-color: #2484f1;\r\n\tcolor: white;\r\n\tborder: none;\r\n\tborder-radius: 10rpx;\r\n\tmargin-top: 20rpx;\r\n\twidth: 100%;\r\n}\r\n\r\n/* 添加模式切换相关样式 */\r\n.mode-option {\r\n\tposition: relative;\r\n\ttransition: all 0.3s ease;\r\n}\r\n\r\n.mode-switching {\r\n\tbackground-color: rgba(36, 132, 241, 0.1);\r\n}\r\n\r\n.loading-dot {\r\n\tposition: absolute;\r\n\tright: 4rpx;\r\n\ttop: 4rpx;\r\n\twidth: 6rpx;\r\n\theight: 6rpx;\r\n\tborder-radius: 50%;\r\n\tbackground-color: #2484f1;\r\n\tanimation: pulse 1s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n\t0% {\r\n\t\ttransform: scale(1);\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t50% {\r\n\t\ttransform: scale(1.5);\r\n\t\topacity: 0.5;\r\n\t}\r\n\r\n\t100% {\r\n\t\ttransform: scale(1);\r\n\t\topacity: 1;\r\n\t}\r\n}\r\n\r\n/* 优化模式选择器的过渡效果 */\r\n.mode-selector {\r\n\ttransition: all 0.3s ease;\r\n}\r\n\r\n.mode-option.mode-active {\r\n\ttransition: all 0.3s ease;\r\n}\r\n</style>"],"sourceRoot":""}